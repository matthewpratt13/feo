*Grammar*

**Glossary**
*   -> zero or more
+   -> one or more
?   -> optional
!   -> negate
()  -> group items

////////////////////////////////////////////////////////////////////////////////

<Item>              ::= <Visibility>? 
                        (Module,
                        | ExternCrate
                        | ImportDeclaration
                        | Function
                        | TypeAlias
                        | Struct
                        | Enum
                        | Contract
                        | Interface
                        | ConstantItem
                        | Trait
                        | Implementation)

<Module>            ::= <KwMod> <Identifier>
                        | <KwMod> <Identifier> <(DelimKind::Brace, DelimOrientation::Open)>
                            <Attribute>*
                            <Item>*
                        | <(DelimKind::Brace, DelimOrientation::Close)>

<ExternCrate>       ::= <KwExtern> <KwCrate> <CrateRef> <AsClause>? <PuncKind::Semicolon>

<CrateRef>          ::= <Identifier> | <KwSelf>

<AsClause>          :: <KwAs> <Identifier>

<ImportDeclaration> ::= <KwImport> <ImportTree> <PuncKind::Semicolon>

<ImportTree>        ::= (<SimplePath>? <PuncKind::DblColon>)? <PuncKind::Asterisk>
                        | (<SimplePath>? PuncKind::DblColon)? <(DelimKind::Brace, DelimOrientation::Open)>
                            (<PuncKind::Comma>, <ImportTree>)* <PuncKind::Comma>?)? 
                            <(DelimKind::Brace, DelimOrientation::Close)>
                        | <SimplePath> (<KwAs> <Identifier>)?      

////////////////////////////////////////////////////////////////////////////////`   

<Statement>         ::= <PuncKind::Semicolon>
                        | <Item>
                        | <LetStatement>
                        | <ExprStatement>

<LetStatement>      ::= <KwLet> <KwMut>? <Identifier> (<PuncKind::Colon> <TypeAnnotation>)? = <Expression> <PuncKind::Semicolon>
                        
<ExprStatement>     ::= <ExprWithoutBlock> <PuncKind::Semicolon>

////////////////////////////////////////////////////////////////////////////////

<Expression>        ::= <ExprWithoutBlock> | <ExprWithBlock>

<ExprWithoutBlock>  ::= <Attribute> 
                        (<LiteralExpr> 
                        | <PathExpr>
                        | <OperatorExpr>
                        | <GroupedExpr>
                        | <ArrayExpr>
                        | <IndexExpr>
                        | <TupleExpr>
                        | <TupleIndexingExpr>
                        | <StructExpr>
                        | <CallExpr>
                        | <MethodCallExpr>
                        | <FieldAccessExpr>
                        | <ContinueExpr>
                        | <BreakExpr>
                        | <ReturnExpr>
                        | <UnderscoreExpr>)

<ExprWithBlock>     ::= <Attribute>
                        (<BlockExpr>
                        | <LoopExpr>
                        | <IfExpr>
                        | <MatchExpr>)

<Attribute>         ::= <PuncKind::Hash> <(DelimKind::Bracket, DelimOrientation::Open) <SimplePath> <(DelimKind::Bracket, DelimOrientation::Close)

<SimplePath>        ::= <PuncKind::DblColon>? <PathSegment> (PuncKind::DblColon <PathSegment>)*  

<PathSegment>       ::= <Identifier>
                        | <KwSuper>
                        | <KwSelf>
                        | <KwCrate>

<PathExpr>          ::= <PathLocation> | <PathItem>

<PathLocation>      ::= <SimplePath>

<LiteralExpr>       ::= <CharLit>
                        | <StringLit>
                        | <IntLit>
                        | <UIntLit>
                        | <U256Lit>
                        | <FloatLit>
                        | <BoolLit>

<BoolLit>           ::= true | false

<BlockExpr>         ::= <(DelimKind::Brace, DelimOrientation::Open)>
                            <Statements>
                        <(DelimKind::Brace, DelimOrientation::Close)>

<Statements>        ::= <Statement>
                        | <Statement> <ExprWithoutBlock>
                        | <ExprWithoutBlock>

<OperatorExpr>      ::= <OptionUnwrapExpr>
                        <NegationExpr>
                        <ArithmeticOrLogicalExpr>
                        <ComparisonExpr>
                        <LazyBoolExpr>
                        <TypeCastExpr>
                        <AssignExpr>
                        <CompoundAssignExpr>

<OptionUnwrapExpr   ::= <Expression> <PuncKind::QuestionMark>

<NegationExpr>      ::= <PuncKind::Minus> <Expression>
                        | <PuncKind::Bang> <Expression>

<ArithOrLogicalExpr>::= <Expression> <PuncKind::Plus> <Expression>
                        | <Expression> <PuncKind::Minus> <Expression>
                        | <Expression> <PuncKind::Asterisk> <Expression>
                        | <Expression> <PuncKind::ForwardSlash> <Expression>
                        | <Expression> <PuncKind::Percent> <Expression>
                        | <Expression> <PuncKind::Ampersand> <Expression>
                        | <Expression> <PuncKind::Pipe> <Expression>
                        | <Expression> <PuncKind::DblLessThan> <Expression>
                        | <Expression> <PuncKind::DblGreaterThan> <Expression>
                        | <Expression> <PuncKind::DblAsterisk> <Expression>

<ComparisonExpr>    ::= <Expression> <PuncKind::DblEquals> <Expression>
                        | <Expression> <PuncKind::BangEquals> Expression>
                        | <Expression> <PuncKind::LessThan> <Expression>
                        | <Expression> <PuncKind::GreaterThan> <Expression>
                        | <Expression> <PuncKind::LessThanEquals> <Expression>
                        | <Expression> <PuncKind::GreaterThanEquals> <Expression>

<LazyBoolExpr>      ::= <Expression> <PuncKind::DblAmpersand> <Expression>
                        | <Expression> <PuncKind::DblPipe> <Expression>

<TypeCastExpr>      ::= <Expression> <KwAs> <Type>

<AssignExpr>        ::= <Expression> <PuncKind::Equals> <Expression>

<CompoundAssignExpr>::= <Expression> <PuncKind::PlusEquals> <Expression>
                        | <Expression> <PuncKind::MinusEquals> <Expression>
                        | <Expression> <PuncKind::AsteriskEquals> <Expression>
                        | <Expression> <PuncKind::ForwardSlashEquals> <Expression>
                        | <Expression> <PuncKind::PercentEquals> <Expression>
                        | <Expression> <PuncKind::BangEquals> <Expression>

<GroupedExpr>       ::= <(DelimKind::Parenthesis, DelimOrientation::Open)> <Expression> <(DelimKind::Parenthesis, DelimOrientation::Close)>

<ArrayExpr>         ::= <(DelimKind::Bracket, DelimOrientation::Open)> <ArrayElements>? <(DelimKind::Bracket, DelimOrientation::Close)>

<ArrayElements>     ::= <Expression> (<PuncKind::Comma> <Expression>)* <PuncKind::Comma>?
                        | <Expression> <PuncKind::Semicolon> <Expression>

<IndexExpr>         ::= <Expression> <(DelimKind::Bracket, DelimOrientation::Open) <Expression> <(DelimKind::Bracket, DelimOrientation::Close)>

<TupleExpr>         ::= <(DelimKind::Parenthesis, DelimOrientation::Open)> <TupleElements>? <(DelimKind::Parenthesis, DelimOrientation::Close)>

<TupleElements>     ::= (<Expression> <PuncKind::Comma>)+ <Expression>?

<TupleIndexingExpr> ::= <Expression> <PuncKind::Dot> <UIntLit>

<StructExpr>        ::= <StructExprStruct>
                        | <StructExprTuple>
                        | <StructExprUnit>

<StructExprStruct>  ::= <SimplePath> <(DelimKind::Brace, DelimOrientation::Open>) <StructExprFields>? <DelimKind::Brace, DelimOrientation::Close>

<StructExprFields>  ::= <StructExprField> (PuncKind::Comma, StructExprField)*

<StructExprField>   ::= <Attribute>* (<Identifier> <PuncKind::Colon> <Expression>)

<StructExprType>    ::= <SimplePath> <(DelimKind::Parenthesis, DelimOrientation::Open)>
                        (<Expression> (<PuncKind::Comma> <Expression>)* <PuncKind::Comma>?)?

<StructExprUnit>    ::= <SimplePath>

<CallExpr>          ::= <Expression> <(DelimKind::Parenthesis, DelimOrientation::Open)> <CallParams>? 
                        <(DelimKind::Parenthesis, DelimOrientation::Close)>

<CallParams>        ::= <Expression> (<PuncKind::Comma> <Expression>)* <PuncKind::Comma>?

<MethodCallExpr>    ::= <Expression> <PuncKind::Dot> <PathSegment> <(DelimKind::Parenthesis, DelimOrientation::Open)> <CallParams>? 
                        <(DelimKind::Parenthesis, DelimOrientation::Close)>

<FieldAccessExpr>   ::= <Expression> <PuncKind::Dot> <Identifier>

<LoopExpr>          ::= <KwLoop>?
                        (<InfiniteLoopExpr
                        | <PredicateLoopExpr
                        | <IteratorLoopExpr>)

<InfiniteLoopExpr>  ::= <KwLoop> <BlockExpr>

<PredicateLoopExpr> ::= <KwWhile> <Expression(!<StructExpr>)> <BlockExpr>

<IteratorLoopExpr>  ::= <KwFor> <Pattern> <KwIn> <Expression(!<StructExpr>) <BlockExpr>

<BreakExpr>         ::= <KwBreak>

<ContinueExpr>      ::= <KwContinue>

<IfExpr>            ::= <KwIf> <Expression(!<StructExpr>)> <BlockExpr> (<KwElse> (<BlockExpression> | <IfExpr>))?

<MatchExpr>         ::= <KwMatch> <Expression(!<StructExpr>)> <(DelimKind::Brace, DelimOrientation::Open)>
                            <MatchArms>?
                        <(DelimKind::Brace, DelimOrientation::Close)>

<MatchArms>         ::= (<MatchArm> <PuncKind::FatArrow> (<ExpressionWithoutBlock> <PuncKind::Comma> | <ExpressionWithBlock> <PuncKind::Comma>?))*
                        <MatchArm> <PuncKind::FatArrow> <Expression> <PuncKind::Comma>?

<MatchArms>         ::= <Pattern> <MatchArmGuard>?

<MatchArmGuard>     ::= <KwIf> <Expression>

<ReturnExpr>        ::= <KwReturn> <Expression>?

<UnderscoreExpr>    ::= <PuncKind::Underscore>

////////////////////////////////////////////////////////////////////////////////

<Pattern>           ::= <LiteralPatt>
                        | <IdentifierPatt>
                        | <WildcardPatt>
                        | <ReferencePatt>
                        | <StructPatt>
                        | <TupleStructPatt>
                        | <TuplePatt>
                        | <GroupedPatt>
                        | <SlicePatt>
                        | <PathPatt>

<LiteralPatt>       ::= true | false
                        | <CharLit>
                        | <StringLit>
                        | <IntLit>
                        | <UIntLit>
                        | <U256Lit>
                        | <FloatLit>

<IdentifierPatt>    ::= <KwRef>? <KwMut>? <Identifier>

<WildcardPatt>      ::= <PuncKind::Underscore>

<ReferencePatt>     ::= <KwRef>? <KwMut>? <Pattern>

<StructPatt>        ::= <SimplePath> <(DelimKind::Brace, DelimOrientation::Open)> 
                            <StructPattFields>? <PuncKind::Comma>?
                        <(DelimKind::Brace, DelimOrientation::Close)>

<StructPattFields>  ::= <StructPattField> PuncKind::Comma?

<StructPattField>   ::= <Attribute> 
                        (<UIntLit> <PuncKind::Colon> <Pattern>
                        | <Identifier> <PuncKind::Colon> <Pattern>
                        | <KwRef>? <KwMut>? <Identifier>)

<TupleStructPatt>   ::= <SimplePath> <(DelimKind::Parenthesis, DelimOrientation::Open)> <TupleStructItems>? 
                        <(DelimKind::Parenthesis, DelimOrientation::Close)>

<TupleStructItems>  ::= <Pattern> (<(DelimKind::Parenthesis, DelimOrientation::Open)> <PuncKind::Comma>)* <PuncKind::Comma>?

<TuplePatt>         ::= <(DelimKind::Parenthesis, DelimOrientation::Open)> <TuplePattItems>? <DelimKind::Parenthesis, DelimOrientation::Close)>

<TuplePattItems>    ::= <Pattern> <PuncKind::Comma>
                        | <Pattern> (<PuncKind::Comma>, <Pattern>)+ <PuncKind::Comma>?


<GroupedPatt>       ::= <(DelimKind::Parenthesis, DelimOrientation::Open)>, <Pattern>, <(DelimKind::Parenthesis, DelimOrientation::Close)>

<SlicePatt>         ::= <(DelimKind::Bracket, DelimOrientation::Open)> <SlicePattItems>? <(DelimKind::Bracket, DelimOrientation::Close)>?

<SlicePattItems>    ::= <Pattern> (PuncKind::Comma, <Pattern>)* <PuncKind::Comma>?

<PathPatt>          ::= <PathExpr>
























                        


        








                        

